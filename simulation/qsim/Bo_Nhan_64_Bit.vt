// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/03/2023 11:42:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Bo_Nhan_64_Bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Bo_Nhan_64_Bit_vlg_sample_tst(
	A,
	B,
	CLK,
	Start,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
input  CLK;
input  Start;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLK or Start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Bo_Nhan_64_Bit_vlg_check_tst (
	O,
	WE,
	sampler_rx
);
input [63:0] O;
input  WE;
input sampler_rx;

reg [63:0] O_expected;
reg  WE_expected;

reg [63:0] O_prev;
reg  WE_prev;

reg [63:0] O_expected_prev;
reg  WE_expected_prev;

reg [63:0] last_O_exp;
reg  last_WE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	O_prev = O;
	WE_prev = WE;
end

// update expected /o prevs

always @(trigger)
begin
	O_expected_prev = O_expected;
	WE_expected_prev = WE_expected;
end


// expected O[ 63 ]
initial
begin
	O_expected[63] = 1'bX;
end 
// expected O[ 62 ]
initial
begin
	O_expected[62] = 1'bX;
end 
// expected O[ 61 ]
initial
begin
	O_expected[61] = 1'bX;
end 
// expected O[ 60 ]
initial
begin
	O_expected[60] = 1'bX;
end 
// expected O[ 59 ]
initial
begin
	O_expected[59] = 1'bX;
end 
// expected O[ 58 ]
initial
begin
	O_expected[58] = 1'bX;
end 
// expected O[ 57 ]
initial
begin
	O_expected[57] = 1'bX;
end 
// expected O[ 56 ]
initial
begin
	O_expected[56] = 1'bX;
end 
// expected O[ 55 ]
initial
begin
	O_expected[55] = 1'bX;
end 
// expected O[ 54 ]
initial
begin
	O_expected[54] = 1'bX;
end 
// expected O[ 53 ]
initial
begin
	O_expected[53] = 1'bX;
end 
// expected O[ 52 ]
initial
begin
	O_expected[52] = 1'bX;
end 
// expected O[ 51 ]
initial
begin
	O_expected[51] = 1'bX;
end 
// expected O[ 50 ]
initial
begin
	O_expected[50] = 1'bX;
end 
// expected O[ 49 ]
initial
begin
	O_expected[49] = 1'bX;
end 
// expected O[ 48 ]
initial
begin
	O_expected[48] = 1'bX;
end 
// expected O[ 47 ]
initial
begin
	O_expected[47] = 1'bX;
end 
// expected O[ 46 ]
initial
begin
	O_expected[46] = 1'bX;
end 
// expected O[ 45 ]
initial
begin
	O_expected[45] = 1'bX;
end 
// expected O[ 44 ]
initial
begin
	O_expected[44] = 1'bX;
end 
// expected O[ 43 ]
initial
begin
	O_expected[43] = 1'bX;
end 
// expected O[ 42 ]
initial
begin
	O_expected[42] = 1'bX;
end 
// expected O[ 41 ]
initial
begin
	O_expected[41] = 1'bX;
end 
// expected O[ 40 ]
initial
begin
	O_expected[40] = 1'bX;
end 
// expected O[ 39 ]
initial
begin
	O_expected[39] = 1'bX;
end 
// expected O[ 38 ]
initial
begin
	O_expected[38] = 1'bX;
end 
// expected O[ 37 ]
initial
begin
	O_expected[37] = 1'bX;
end 
// expected O[ 36 ]
initial
begin
	O_expected[36] = 1'bX;
end 
// expected O[ 35 ]
initial
begin
	O_expected[35] = 1'bX;
end 
// expected O[ 34 ]
initial
begin
	O_expected[34] = 1'bX;
end 
// expected O[ 33 ]
initial
begin
	O_expected[33] = 1'bX;
end 
// expected O[ 32 ]
initial
begin
	O_expected[32] = 1'bX;
end 
// expected O[ 31 ]
initial
begin
	O_expected[31] = 1'bX;
end 
// expected O[ 30 ]
initial
begin
	O_expected[30] = 1'bX;
end 
// expected O[ 29 ]
initial
begin
	O_expected[29] = 1'bX;
end 
// expected O[ 28 ]
initial
begin
	O_expected[28] = 1'bX;
end 
// expected O[ 27 ]
initial
begin
	O_expected[27] = 1'bX;
end 
// expected O[ 26 ]
initial
begin
	O_expected[26] = 1'bX;
end 
// expected O[ 25 ]
initial
begin
	O_expected[25] = 1'bX;
end 
// expected O[ 24 ]
initial
begin
	O_expected[24] = 1'bX;
end 
// expected O[ 23 ]
initial
begin
	O_expected[23] = 1'bX;
end 
// expected O[ 22 ]
initial
begin
	O_expected[22] = 1'bX;
end 
// expected O[ 21 ]
initial
begin
	O_expected[21] = 1'bX;
end 
// expected O[ 20 ]
initial
begin
	O_expected[20] = 1'bX;
end 
// expected O[ 19 ]
initial
begin
	O_expected[19] = 1'bX;
end 
// expected O[ 18 ]
initial
begin
	O_expected[18] = 1'bX;
end 
// expected O[ 17 ]
initial
begin
	O_expected[17] = 1'bX;
end 
// expected O[ 16 ]
initial
begin
	O_expected[16] = 1'bX;
end 
// expected O[ 15 ]
initial
begin
	O_expected[15] = 1'bX;
end 
// expected O[ 14 ]
initial
begin
	O_expected[14] = 1'bX;
end 
// expected O[ 13 ]
initial
begin
	O_expected[13] = 1'bX;
end 
// expected O[ 12 ]
initial
begin
	O_expected[12] = 1'bX;
end 
// expected O[ 11 ]
initial
begin
	O_expected[11] = 1'bX;
end 
// expected O[ 10 ]
initial
begin
	O_expected[10] = 1'bX;
end 
// expected O[ 9 ]
initial
begin
	O_expected[9] = 1'bX;
end 
// expected O[ 8 ]
initial
begin
	O_expected[8] = 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 

// expected WE
initial
begin
	WE_expected = 1'bX;
end 
// generate trigger
always @(O_expected or O or WE_expected or WE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O = %b | expected WE = %b | ",O_expected_prev,WE_expected_prev);
	$display("| real O = %b | real WE = %b | ",O_prev,WE_prev);
`endif
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end
	if (
		( O_expected_prev[8] !== 1'bx ) && ( O_prev[8] !== O_expected_prev[8] )
		&& ((O_expected_prev[8] !== last_O_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[8] = O_expected_prev[8];
	end
	if (
		( O_expected_prev[9] !== 1'bx ) && ( O_prev[9] !== O_expected_prev[9] )
		&& ((O_expected_prev[9] !== last_O_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[9] = O_expected_prev[9];
	end
	if (
		( O_expected_prev[10] !== 1'bx ) && ( O_prev[10] !== O_expected_prev[10] )
		&& ((O_expected_prev[10] !== last_O_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[10] = O_expected_prev[10];
	end
	if (
		( O_expected_prev[11] !== 1'bx ) && ( O_prev[11] !== O_expected_prev[11] )
		&& ((O_expected_prev[11] !== last_O_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[11] = O_expected_prev[11];
	end
	if (
		( O_expected_prev[12] !== 1'bx ) && ( O_prev[12] !== O_expected_prev[12] )
		&& ((O_expected_prev[12] !== last_O_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[12] = O_expected_prev[12];
	end
	if (
		( O_expected_prev[13] !== 1'bx ) && ( O_prev[13] !== O_expected_prev[13] )
		&& ((O_expected_prev[13] !== last_O_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[13] = O_expected_prev[13];
	end
	if (
		( O_expected_prev[14] !== 1'bx ) && ( O_prev[14] !== O_expected_prev[14] )
		&& ((O_expected_prev[14] !== last_O_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[14] = O_expected_prev[14];
	end
	if (
		( O_expected_prev[15] !== 1'bx ) && ( O_prev[15] !== O_expected_prev[15] )
		&& ((O_expected_prev[15] !== last_O_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[15] = O_expected_prev[15];
	end
	if (
		( O_expected_prev[16] !== 1'bx ) && ( O_prev[16] !== O_expected_prev[16] )
		&& ((O_expected_prev[16] !== last_O_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[16] = O_expected_prev[16];
	end
	if (
		( O_expected_prev[17] !== 1'bx ) && ( O_prev[17] !== O_expected_prev[17] )
		&& ((O_expected_prev[17] !== last_O_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[17] = O_expected_prev[17];
	end
	if (
		( O_expected_prev[18] !== 1'bx ) && ( O_prev[18] !== O_expected_prev[18] )
		&& ((O_expected_prev[18] !== last_O_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[18] = O_expected_prev[18];
	end
	if (
		( O_expected_prev[19] !== 1'bx ) && ( O_prev[19] !== O_expected_prev[19] )
		&& ((O_expected_prev[19] !== last_O_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[19] = O_expected_prev[19];
	end
	if (
		( O_expected_prev[20] !== 1'bx ) && ( O_prev[20] !== O_expected_prev[20] )
		&& ((O_expected_prev[20] !== last_O_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[20] = O_expected_prev[20];
	end
	if (
		( O_expected_prev[21] !== 1'bx ) && ( O_prev[21] !== O_expected_prev[21] )
		&& ((O_expected_prev[21] !== last_O_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[21] = O_expected_prev[21];
	end
	if (
		( O_expected_prev[22] !== 1'bx ) && ( O_prev[22] !== O_expected_prev[22] )
		&& ((O_expected_prev[22] !== last_O_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[22] = O_expected_prev[22];
	end
	if (
		( O_expected_prev[23] !== 1'bx ) && ( O_prev[23] !== O_expected_prev[23] )
		&& ((O_expected_prev[23] !== last_O_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[23] = O_expected_prev[23];
	end
	if (
		( O_expected_prev[24] !== 1'bx ) && ( O_prev[24] !== O_expected_prev[24] )
		&& ((O_expected_prev[24] !== last_O_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[24] = O_expected_prev[24];
	end
	if (
		( O_expected_prev[25] !== 1'bx ) && ( O_prev[25] !== O_expected_prev[25] )
		&& ((O_expected_prev[25] !== last_O_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[25] = O_expected_prev[25];
	end
	if (
		( O_expected_prev[26] !== 1'bx ) && ( O_prev[26] !== O_expected_prev[26] )
		&& ((O_expected_prev[26] !== last_O_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[26] = O_expected_prev[26];
	end
	if (
		( O_expected_prev[27] !== 1'bx ) && ( O_prev[27] !== O_expected_prev[27] )
		&& ((O_expected_prev[27] !== last_O_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[27] = O_expected_prev[27];
	end
	if (
		( O_expected_prev[28] !== 1'bx ) && ( O_prev[28] !== O_expected_prev[28] )
		&& ((O_expected_prev[28] !== last_O_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[28] = O_expected_prev[28];
	end
	if (
		( O_expected_prev[29] !== 1'bx ) && ( O_prev[29] !== O_expected_prev[29] )
		&& ((O_expected_prev[29] !== last_O_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[29] = O_expected_prev[29];
	end
	if (
		( O_expected_prev[30] !== 1'bx ) && ( O_prev[30] !== O_expected_prev[30] )
		&& ((O_expected_prev[30] !== last_O_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[30] = O_expected_prev[30];
	end
	if (
		( O_expected_prev[31] !== 1'bx ) && ( O_prev[31] !== O_expected_prev[31] )
		&& ((O_expected_prev[31] !== last_O_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[31] = O_expected_prev[31];
	end
	if (
		( O_expected_prev[32] !== 1'bx ) && ( O_prev[32] !== O_expected_prev[32] )
		&& ((O_expected_prev[32] !== last_O_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[32] = O_expected_prev[32];
	end
	if (
		( O_expected_prev[33] !== 1'bx ) && ( O_prev[33] !== O_expected_prev[33] )
		&& ((O_expected_prev[33] !== last_O_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[33] = O_expected_prev[33];
	end
	if (
		( O_expected_prev[34] !== 1'bx ) && ( O_prev[34] !== O_expected_prev[34] )
		&& ((O_expected_prev[34] !== last_O_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[34] = O_expected_prev[34];
	end
	if (
		( O_expected_prev[35] !== 1'bx ) && ( O_prev[35] !== O_expected_prev[35] )
		&& ((O_expected_prev[35] !== last_O_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[35] = O_expected_prev[35];
	end
	if (
		( O_expected_prev[36] !== 1'bx ) && ( O_prev[36] !== O_expected_prev[36] )
		&& ((O_expected_prev[36] !== last_O_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[36] = O_expected_prev[36];
	end
	if (
		( O_expected_prev[37] !== 1'bx ) && ( O_prev[37] !== O_expected_prev[37] )
		&& ((O_expected_prev[37] !== last_O_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[37] = O_expected_prev[37];
	end
	if (
		( O_expected_prev[38] !== 1'bx ) && ( O_prev[38] !== O_expected_prev[38] )
		&& ((O_expected_prev[38] !== last_O_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[38] = O_expected_prev[38];
	end
	if (
		( O_expected_prev[39] !== 1'bx ) && ( O_prev[39] !== O_expected_prev[39] )
		&& ((O_expected_prev[39] !== last_O_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[39] = O_expected_prev[39];
	end
	if (
		( O_expected_prev[40] !== 1'bx ) && ( O_prev[40] !== O_expected_prev[40] )
		&& ((O_expected_prev[40] !== last_O_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[40] = O_expected_prev[40];
	end
	if (
		( O_expected_prev[41] !== 1'bx ) && ( O_prev[41] !== O_expected_prev[41] )
		&& ((O_expected_prev[41] !== last_O_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[41] = O_expected_prev[41];
	end
	if (
		( O_expected_prev[42] !== 1'bx ) && ( O_prev[42] !== O_expected_prev[42] )
		&& ((O_expected_prev[42] !== last_O_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[42] = O_expected_prev[42];
	end
	if (
		( O_expected_prev[43] !== 1'bx ) && ( O_prev[43] !== O_expected_prev[43] )
		&& ((O_expected_prev[43] !== last_O_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[43] = O_expected_prev[43];
	end
	if (
		( O_expected_prev[44] !== 1'bx ) && ( O_prev[44] !== O_expected_prev[44] )
		&& ((O_expected_prev[44] !== last_O_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[44] = O_expected_prev[44];
	end
	if (
		( O_expected_prev[45] !== 1'bx ) && ( O_prev[45] !== O_expected_prev[45] )
		&& ((O_expected_prev[45] !== last_O_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[45] = O_expected_prev[45];
	end
	if (
		( O_expected_prev[46] !== 1'bx ) && ( O_prev[46] !== O_expected_prev[46] )
		&& ((O_expected_prev[46] !== last_O_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[46] = O_expected_prev[46];
	end
	if (
		( O_expected_prev[47] !== 1'bx ) && ( O_prev[47] !== O_expected_prev[47] )
		&& ((O_expected_prev[47] !== last_O_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[47] = O_expected_prev[47];
	end
	if (
		( O_expected_prev[48] !== 1'bx ) && ( O_prev[48] !== O_expected_prev[48] )
		&& ((O_expected_prev[48] !== last_O_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[48] = O_expected_prev[48];
	end
	if (
		( O_expected_prev[49] !== 1'bx ) && ( O_prev[49] !== O_expected_prev[49] )
		&& ((O_expected_prev[49] !== last_O_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[49] = O_expected_prev[49];
	end
	if (
		( O_expected_prev[50] !== 1'bx ) && ( O_prev[50] !== O_expected_prev[50] )
		&& ((O_expected_prev[50] !== last_O_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[50] = O_expected_prev[50];
	end
	if (
		( O_expected_prev[51] !== 1'bx ) && ( O_prev[51] !== O_expected_prev[51] )
		&& ((O_expected_prev[51] !== last_O_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[51] = O_expected_prev[51];
	end
	if (
		( O_expected_prev[52] !== 1'bx ) && ( O_prev[52] !== O_expected_prev[52] )
		&& ((O_expected_prev[52] !== last_O_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[52] = O_expected_prev[52];
	end
	if (
		( O_expected_prev[53] !== 1'bx ) && ( O_prev[53] !== O_expected_prev[53] )
		&& ((O_expected_prev[53] !== last_O_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[53] = O_expected_prev[53];
	end
	if (
		( O_expected_prev[54] !== 1'bx ) && ( O_prev[54] !== O_expected_prev[54] )
		&& ((O_expected_prev[54] !== last_O_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[54] = O_expected_prev[54];
	end
	if (
		( O_expected_prev[55] !== 1'bx ) && ( O_prev[55] !== O_expected_prev[55] )
		&& ((O_expected_prev[55] !== last_O_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[55] = O_expected_prev[55];
	end
	if (
		( O_expected_prev[56] !== 1'bx ) && ( O_prev[56] !== O_expected_prev[56] )
		&& ((O_expected_prev[56] !== last_O_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[56] = O_expected_prev[56];
	end
	if (
		( O_expected_prev[57] !== 1'bx ) && ( O_prev[57] !== O_expected_prev[57] )
		&& ((O_expected_prev[57] !== last_O_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[57] = O_expected_prev[57];
	end
	if (
		( O_expected_prev[58] !== 1'bx ) && ( O_prev[58] !== O_expected_prev[58] )
		&& ((O_expected_prev[58] !== last_O_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[58] = O_expected_prev[58];
	end
	if (
		( O_expected_prev[59] !== 1'bx ) && ( O_prev[59] !== O_expected_prev[59] )
		&& ((O_expected_prev[59] !== last_O_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[59] = O_expected_prev[59];
	end
	if (
		( O_expected_prev[60] !== 1'bx ) && ( O_prev[60] !== O_expected_prev[60] )
		&& ((O_expected_prev[60] !== last_O_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[60] = O_expected_prev[60];
	end
	if (
		( O_expected_prev[61] !== 1'bx ) && ( O_prev[61] !== O_expected_prev[61] )
		&& ((O_expected_prev[61] !== last_O_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[61] = O_expected_prev[61];
	end
	if (
		( O_expected_prev[62] !== 1'bx ) && ( O_prev[62] !== O_expected_prev[62] )
		&& ((O_expected_prev[62] !== last_O_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[62] = O_expected_prev[62];
	end
	if (
		( O_expected_prev[63] !== 1'bx ) && ( O_prev[63] !== O_expected_prev[63] )
		&& ((O_expected_prev[63] !== last_O_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[63] = O_expected_prev[63];
	end
	if (
		( WE_expected_prev !== 1'bx ) && ( WE_prev !== WE_expected_prev )
		&& ((WE_expected_prev !== last_WE_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WE_expected_prev);
		$display ("     Real value = %b", WE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_WE_exp = WE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Bo_Nhan_64_Bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg CLK;
reg Start;
// wires                                               
wire [63:0] O;
wire WE;

wire sampler;                             

// assign statements (if any)                          
Bo_Nhan_64_Bit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.O(O),
	.Start(Start),
	.WE(WE)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #40000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #40000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #50000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #50000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #50000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #100000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #40000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #40000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #40000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #40000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #60000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #30000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #40000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #40000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #50000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #60000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #60000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #60000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #50000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #20000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #40000 1'b1;
	A[4] = #30000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #60000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #30000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #30000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #50000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #50000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #40000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #50000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #50000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #60000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #30000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #50000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #50000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #50000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #50000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #60000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #10000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #60000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #50000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #50000 1'b1;
	A[1] = #50000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #50000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #50000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #50000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #50000 1'b0;
	A[0] = #120000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #20000 1'b1;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #40000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #50000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #30000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #40000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #40000 1'b0;
	B[7] = #30000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #20000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #10000 1'b0;
	B[7] = #10000 1'b1;
	B[7] = #30000 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #40000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #40000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #50000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #30000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #30000 1'b0;
	B[6] = #30000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #80000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #10000 1'b0;
	B[6] = #10000 1'b1;
	B[6] = #20000 1'b0;
	B[6] = #80000 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #30000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #40000 1'b0;
	B[5] = #30000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #50000 1'b0;
	B[5] = #40000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #30000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #30000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #30000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #30000 1'b0;
	B[5] = #50000 1'b1;
	B[5] = #30000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #20000 1'b0;
	B[5] = #10000 1'b1;
	B[5] = #10000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #50000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #40000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #40000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #30000 1'b1;
	B[4] = #10000 1'b0;
	B[4] = #10000 1'b1;
	B[4] = #30000 1'b0;
	B[4] = #30000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
	B[3] = #50000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #40000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #50000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #50000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #50000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #40000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #30000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #60000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #40000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #40000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #60000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #70000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #60000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #50000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #40000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #60000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #40000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #70000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #50000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #50000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #40000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #70000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #60000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #70000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #30000 1'b1;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #10000 1'b1;
	Start = #10000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

Bo_Nhan_64_Bit_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLK(CLK),
	.Start(Start),
	.sampler_tx(sampler)
);

Bo_Nhan_64_Bit_vlg_check_tst tb_out(
	.O(O),
	.WE(WE),
	.sampler_rx(sampler)
);
endmodule

